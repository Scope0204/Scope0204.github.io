{"version":3,"sources":["webpack://flexible-gatsby/./src/components/seo.js","webpack://flexible-gatsby/./src/templates/category-post.js"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","pageContext","data","siteTitle","category","posts","allMarkdownRemark","edges","keywords","className","map","node","key","fields","slug","frontmatter","img","childImageSharp","gatsbyImageData","Link","to","categories","style","backgroundImage","images","fallback","src","excerpt","date","timeToRead"],"mappings":"yJAYA,SAASA,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC5BC,GAASC,oBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YAEzD,OACI,gBAAC,IAAD,CACIQ,eAAgB,CACZP,QAEJE,MAAOA,EACPM,cAAa,QAAUL,EAAKG,aAAaJ,MACzCD,KAAM,CACF,CACIQ,KAAK,cACLC,QAASL,GAEb,CACIM,SAAS,WACTD,QAASR,GAEb,CACIS,SAAS,iBACTD,QAASL,GAEb,CACIM,SAAS,UACTD,QAAQ,WAEZ,CACID,KAAK,eACLC,QAAQ,WAEZ,CACID,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE/B,CACIH,KAAK,gBACLC,QAASR,GAEb,CACIO,KAAK,sBACLC,QAASL,IAEfQ,OAAOZ,KAKrBH,EAAIgB,aAAe,CACfd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUhB,O,qFCRA,UA9CmB,SAAC,GAA2B,IAAzBgB,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KAEzBC,GADeF,EAAbG,SACUF,EAAKb,KAAKG,aAAaJ,OACnCiB,EAAQH,EAAKI,kBAAkBC,MAErC,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CACInB,MAAOe,EACPK,SAAU,CAAC,OAAD,iCAEd,uBAAKC,UAAU,wBACVJ,EAAMK,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACV,OACI,2BAASF,UAAU,OAAOG,IAAKD,EAAKE,OAAOC,MACtCH,EAAKI,YAAYC,KACdL,EAAKI,YAAYC,IAAIC,iBACrBN,EAAKI,YAAYC,IAAIC,gBAAgBC,iBACjC,gBAAC,EAAAC,KAAD,CACIC,GAAI,IAAMT,EAAKI,YAAYM,WAAaV,EAAKE,OAAOC,KACpDL,UAAU,iBACVa,MAAO,CACHC,gBAAgB,OAAQZ,EAAKI,YAAYC,IAAIC,gBAAgBC,gBAAgBM,OAAOC,SAASC,IAA9E,OAI/B,uBAAKjB,UAAU,gBACX,sBAAIA,UAAU,cACV,gBAAC,EAAAU,KAAD,CAAMC,GAAI,IAAMT,EAAKI,YAAYM,WAAaV,EAAKE,OAAOC,MAAOH,EAAKI,YAAY3B,QAEtF,yBAAIuB,EAAKgB,SACT,wBAAMlB,UAAU,aACXE,EAAKI,YAAYa,KADtB,QAGA,wBAAMnB,UAAU,cACXE,EAAKkB,WADV","file":"component---src-templates-category-post-js-5740131bf6b7dd9bc575.js","sourcesContent":["/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n    const { site } = useStaticQuery(\r\n        graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n    )\r\n\r\n    const metaDescription = description || site.siteMetadata.description\r\n\r\n    return (\r\n        <Helmet\r\n            htmlAttributes={{\r\n                lang,\r\n            }}\r\n            title={title}\r\n            titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n            meta={[\r\n                {\r\n                    name: `description`,\r\n                    content: metaDescription,\r\n                },\r\n                {\r\n                    property: `og:title`,\r\n                    content: title,\r\n                },\r\n                {\r\n                    property: `og:description`,\r\n                    content: metaDescription,\r\n                },\r\n                {\r\n                    property: `og:type`,\r\n                    content: `website`,\r\n                },\r\n                {\r\n                    name: `twitter:card`,\r\n                    content: `summary`,\r\n                },\r\n                {\r\n                    name: `twitter:creator`,\r\n                    content: site.siteMetadata.author,\r\n                },\r\n                {\r\n                    name: `twitter:title`,\r\n                    content: title,\r\n                },\r\n                {\r\n                    name: `twitter:description`,\r\n                    content: metaDescription,\r\n                },\r\n            ].concat(meta)}\r\n        />\r\n    )\r\n}\r\n\r\nSEO.defaultProps = {\r\n    lang: `en`,\r\n    meta: [],\r\n    description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n    description: PropTypes.string,\r\n    lang: PropTypes.string,\r\n    meta: PropTypes.arrayOf(PropTypes.object),\r\n    title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","\r\n// class Categories extends React.Component {\r\n//     render() {\r\n//         const { category } = this.props.pageContext\r\n//         const { data } = this.props\r\n//         const { siteTitle } = data.site.siteMetadata.title\r\n//         console.log(data)\r\n\r\n\r\n\r\n//         return (\r\n//             <DefaultLayout>\r\n//                 <SEO\r\n//                     title={siteTitle}\r\n//                     keywords={[`blog`, `gatsby`, `javascript`, `react`]}\r\n//                 />\r\n//                 <div className=\"content-box clearfix\">\r\n//                     <div className=\"blog-tags\">\r\n//                         <h1>{category}</h1>\r\n//                     </div>\r\n//                 </div>\r\n//             </DefaultLayout>\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\nimport React from 'react'\r\nimport { Link, graphql } from 'gatsby'\r\n\r\nimport Layout from '../components/layout'\r\nimport SEO from '../components/seo'\r\n\r\nconst Categories = ({ pageContext, data }) => {\r\n    const { category } = pageContext\r\n    const siteTitle = data.site.siteMetadata.title\r\n    const posts = data.allMarkdownRemark.edges\r\n\r\n    return (\r\n        <Layout>\r\n            <SEO\r\n                title={siteTitle}\r\n                keywords={[`blog`, `gatsby`, `javascript`, `react`]}\r\n            />\r\n            <div className=\"content-box clearfix\">\r\n                {posts.map(({ node }) => {\r\n                    return (\r\n                        <article className=\"post\" key={node.fields.slug}>\r\n                            {node.frontmatter.img &&\r\n                                node.frontmatter.img.childImageSharp &&\r\n                                node.frontmatter.img.childImageSharp.gatsbyImageData && (\r\n                                    <Link\r\n                                        to={\"/\" + node.frontmatter.categories + node.fields.slug}\r\n                                        className=\"post-thumbnail\"\r\n                                        style={{\r\n                                            backgroundImage: `url(${node.frontmatter.img.childImageSharp.gatsbyImageData.images.fallback.src})`,\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            <div className=\"post-content\">\r\n                                <h2 className=\"post-title\">\r\n                                    <Link to={\"/\" + node.frontmatter.categories + node.fields.slug}>{node.frontmatter.title}</Link>\r\n                                </h2>\r\n                                <p>{node.excerpt}</p>\r\n                                <span className=\"post-date\">\r\n                                    {node.frontmatter.date}&nbsp;&nbsp;â€”&nbsp;\r\n                                </span>\r\n                                <span className=\"post-words\">\r\n                                    {node.timeToRead} minute read\r\n                                </span>\r\n                            </div>\r\n                        </article>\r\n                    )\r\n                })}\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default Categories\r\n\r\nexport const pageQuery = graphql`\r\n    query CategoryPostBySlug($category: String) {\r\n        site {\r\n            siteMetadata {\r\n                title\r\n            }\r\n        }\r\n        allMarkdownRemark(\r\n            limit: 2000\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n            filter: { frontmatter: { categories: { in: [$category] } } }\r\n        ) {\r\n            totalCount\r\n            edges {\r\n                node {\r\n                    excerpt\r\n                    fields {\r\n                        slug\r\n                    }\r\n                    timeToRead\r\n                    frontmatter {\r\n                        date(formatString: \"MMMM DD, YYYY\")\r\n                        title\r\n                        categories\r\n                        img {\r\n                            childImageSharp {\r\n                                gatsbyImageData(placeholder: BLURRED,\r\n                                    layout: FULL_WIDTH,\r\n                                    formats: [AUTO, AVIF, WEBP])\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n"],"sourceRoot":""}